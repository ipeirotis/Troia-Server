/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.datascience.utils.transformations.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TLabel extends org.apache.thrift.TUnion<TLabel, TLabel._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLabel");
  private static final org.apache.thrift.protocol.TField NOMINAL_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("nominalLabel", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONT_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("contLabel", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOMINAL_LABEL((short)1, "nominalLabel"),
    CONT_LABEL((short)2, "contLabel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOMINAL_LABEL
          return NOMINAL_LABEL;
        case 2: // CONT_LABEL
          return CONT_LABEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOMINAL_LABEL, new org.apache.thrift.meta_data.FieldMetaData("nominalLabel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNominalLabel.class)));
    tmpMap.put(_Fields.CONT_LABEL, new org.apache.thrift.meta_data.FieldMetaData("contLabel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TContLabel.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLabel.class, metaDataMap);
  }

  public TLabel() {
    super();
  }

  public TLabel(_Fields setField, Object value) {
    super(setField, value);
  }

  public TLabel(TLabel other) {
    super(other);
  }
  public TLabel deepCopy() {
    return new TLabel(this);
  }

  public static TLabel nominalLabel(TNominalLabel value) {
    TLabel x = new TLabel();
    x.setNominalLabel(value);
    return x;
  }

  public static TLabel contLabel(TContLabel value) {
    TLabel x = new TLabel();
    x.setContLabel(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case NOMINAL_LABEL:
        if (value instanceof TNominalLabel) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TNominalLabel for field 'nominalLabel', but got " + value.getClass().getSimpleName());
      case CONT_LABEL:
        if (value instanceof TContLabel) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TContLabel for field 'contLabel', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case NOMINAL_LABEL:
          if (field.type == NOMINAL_LABEL_FIELD_DESC.type) {
            TNominalLabel nominalLabel;
            nominalLabel = new TNominalLabel();
            nominalLabel.read(iprot);
            return nominalLabel;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONT_LABEL:
          if (field.type == CONT_LABEL_FIELD_DESC.type) {
            TContLabel contLabel;
            contLabel = new TContLabel();
            contLabel.read(iprot);
            return contLabel;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case NOMINAL_LABEL:
        TNominalLabel nominalLabel = (TNominalLabel)value_;
        nominalLabel.write(oprot);
        return;
      case CONT_LABEL:
        TContLabel contLabel = (TContLabel)value_;
        contLabel.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case NOMINAL_LABEL:
          TNominalLabel nominalLabel;
          nominalLabel = new TNominalLabel();
          nominalLabel.read(iprot);
          return nominalLabel;
        case CONT_LABEL:
          TContLabel contLabel;
          contLabel = new TContLabel();
          contLabel.read(iprot);
          return contLabel;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case NOMINAL_LABEL:
        TNominalLabel nominalLabel = (TNominalLabel)value_;
        nominalLabel.write(oprot);
        return;
      case CONT_LABEL:
        TContLabel contLabel = (TContLabel)value_;
        contLabel.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case NOMINAL_LABEL:
        return NOMINAL_LABEL_FIELD_DESC;
      case CONT_LABEL:
        return CONT_LABEL_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TNominalLabel getNominalLabel() {
    if (getSetField() == _Fields.NOMINAL_LABEL) {
      return (TNominalLabel)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'nominalLabel' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNominalLabel(TNominalLabel value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.NOMINAL_LABEL;
    value_ = value;
  }

  public TContLabel getContLabel() {
    if (getSetField() == _Fields.CONT_LABEL) {
      return (TContLabel)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'contLabel' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setContLabel(TContLabel value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CONT_LABEL;
    value_ = value;
  }

  public boolean isSetNominalLabel() {
    return setField_ == _Fields.NOMINAL_LABEL;
  }


  public boolean isSetContLabel() {
    return setField_ == _Fields.CONT_LABEL;
  }


  public boolean equals(Object other) {
    if (other instanceof TLabel) {
      return equals((TLabel)other);
    } else {
      return false;
    }
  }

  public boolean equals(TLabel other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TLabel other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
